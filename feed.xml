<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Burling&#39;s Blog</title>
    <description>Welcome to Burling&#39;s personal blog.
</description>
    <link>http://blog.burling.wang/</link>
    <atom:link href="http://blog.burling.wang/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Dec 2015 13:57:12 +0000</pubDate>
    <lastBuildDate>Sun, 13 Dec 2015 13:57:12 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Django REST框架的API版本控制</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;目录&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;目录&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;版本控制&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#django-rest&quot; id=&quot;markdown-toc-django-rest&quot;&gt;使用Django-REST框架进行版本控制&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;基于版本的行为选择&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#urlapi&quot; id=&quot;markdown-toc-urlapi&quot;&gt;反转URL到版本化的API&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#apihyperlinked-serializers&quot; id=&quot;markdown-toc-apihyperlinked-serializers&quot;&gt;版本化的API和hyperlinked serializers&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;配置版本控制方案&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;其他版本控制的设定&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#vendor-media-typesaccept-headers&quot; id=&quot;markdown-toc-vendor-media-typesaccept-headers&quot;&gt;使用带vendor media types的accept headers&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#urlpathversioning&quot; id=&quot;markdown-toc-urlpathversioning&quot;&gt;URLPathVersioning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#namesapceversioning&quot; id=&quot;markdown-toc-namesapceversioning&quot;&gt;NamesapceVersioning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hostnameversioning&quot; id=&quot;markdown-toc-hostnameversioning&quot;&gt;HostNameVersioning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#queryparameterversioning&quot; id=&quot;markdown-toc-queryparameterversioning&quot;&gt;QueryParameterVersioning&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;自定义版本控制方案&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;例子&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;版本控制&lt;/h1&gt;
&lt;p&gt;API版本控制允许你在不同的客户端之间修改接口，REST框架提供了多个不同的版本控制方案。&lt;/p&gt;

&lt;p&gt;版本控制是由客户端请求决定的，可以是基于URL请求，也可以是基于请求的header。&lt;/p&gt;

&lt;p&gt;还有很多其他的版本控制方式，比如这篇文章&lt;a href=&quot;http://www.infoq.com/articles/roy-fielding-on-versioning&quot;&gt;《Non-versioned systems can also be appropriate》&lt;/a&gt;提供的方案尤其适合对老系统进行改造。&lt;/p&gt;

&lt;h2 id=&quot;django-rest&quot;&gt;使用Django-REST框架进行版本控制&lt;/h2&gt;
&lt;p&gt;当启用了API版本控制，&lt;code&gt;request.version&lt;/code&gt;属性将会以字符串的形式响应给客户端请求；但是默认的版本控制是不启用的，而&lt;code&gt;request.version&lt;/code&gt;则会返回&lt;code&gt;None&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;基于版本的行为选择&lt;/h3&gt;
&lt;p&gt;如何改变API的行为可以由你自己决定，最普遍的方法就是你根据版本将请求切换到对应的序列化行为上，例如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_serializer_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountSerializerVersion1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountSerializer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;urlapi&quot;&gt;反转URL到版本化的API&lt;/h3&gt;
&lt;p&gt;Django-REST框架的版本化方案包括了&lt;code&gt;reverse&lt;/code&gt;函数，你需要以当前的&lt;code&gt;request&lt;/code&gt;作为变量：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework.reverse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bookings-list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上函数将会把所有的URL转到合适的api版本，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果&lt;code&gt;NamespacedVersioning&lt;/code&gt;被启用了，并且API版本是’v1’，那么URL查找模式就会是&lt;code&gt;&#39;v1:bookings-list&#39;&lt;/code&gt;，就会被定向到比如&lt;code&gt;http://example.org/v1/bookings/&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果&lt;code&gt;QueryParameterVersioning&lt;/code&gt;被启用了，并且API版本是&lt;code&gt;1.0&lt;/code&gt;，那么返回的URL将会是这种形式&lt;code&gt;http://example.org/bookings/?version=1.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apihyperlinked-serializers&quot;&gt;版本化的API和hyperlinked serializers&lt;/h3&gt;
&lt;p&gt;当使用hyperlinked serialization方式和基于URL的版本化方案，请将&lt;code&gt;request&lt;/code&gt;作为&lt;code&gt;context&lt;/code&gt;引用到序列器中：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Booking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BookingsSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;all_bookings&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样就能允许所有返回的URL包含版本控制。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;配置版本控制方案&lt;/h2&gt;
&lt;p&gt;版本控制方案是由settings.py中的&lt;code&gt;DEFAULT_VERSIONING_CLASS&lt;/code&gt;定义的:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&amp;#39;DEFAULT_VERSIONING_CLASS&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;rest_framework.versioning.NamespaceVersioning&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;除非特别指定，否则&lt;code&gt;DEFAULT_VERSIONING_CLASS&lt;/code&gt;默认是&lt;code&gt;None&lt;/code&gt;，那么&lt;code&gt;request.version&lt;/code&gt;属性将会返回&lt;code&gt;None&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;你也可以在一个特定的view中设定版本控制方案，一般你不需要这么做，因为单独为一个view指定版本控制方案意义不大。但是如果你确实需要，请在view中设置&lt;code&gt;versioning_class&lt;/code&gt;属性：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProfileList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;versioning_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;versioning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryParameterVersioning&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;其他版本控制的设定&lt;/h3&gt;
&lt;p&gt;以下的key可以用于设置版本控制：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;DEFAULT_VERSION&lt;/code&gt;，该值将用于&lt;code&gt;request.version&lt;/code&gt;的返回，当版本信息没有被给出的时候。默认值是&lt;code&gt;None&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ALLOWED_VERSIONS&lt;/code&gt;，该值用于限定访问的版本，如果访问版本不在该集合中，将会抛出错误。需要注意的是，&lt;code&gt;DEFAULT_VERSION&lt;/code&gt;的值将会默认被当成&lt;code&gt;ALLOWED_VERSIONS&lt;/code&gt;的一部分。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;VERSION_PARAM&lt;/code&gt;，用于所有版本控制的参数，可以是在media type中或者是URL查询参数中，默认是&lt;code&gt;&#39;version&#39;&lt;/code&gt;。
你也可以通过定义自己的版本控制方案，通过定义这三个参数，并赋给一个view或者viewset。比如，如果你用的是&lt;code&gt;URLPathVersioning&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework.versioning&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URLPathVersioning&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleVersioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLPathVersioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;default_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;allowed_versions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;version_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIVIew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;versioning_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExampleVersioning&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;#API Reference
##AcceptHeaderVersioning
这种方案需要客户端在&lt;code&gt;Accept&lt;/code&gt;头的media type中指定版本号，版本号作为media type的参数，补充主要的media type。下面的例子是包含版本号的HTTP请求形式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/bookings/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;application/json; version=1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的示例请求中，&lt;code&gt;request.version&lt;/code&gt;属性将会返回字符串&lt;code&gt;&#39;1.0&#39;&lt;/code&gt;。
基于accept headers的版本控制被&lt;a href=&quot;http://blog.steveklabnik.com/posts/2011-07-03-nobody-understands-rest-or-http#i_want_my_api_to_be_versioned&quot;&gt;公认&lt;/a&gt;是&lt;a href=&quot;https://github.com/interagent/http-api-design#version-with-accepts-header&quot;&gt;最佳实践&lt;/a&gt;，但是其他的方式对于你的客户端需求来说或许是更好的。&lt;/p&gt;

&lt;h3 id=&quot;vendor-media-typesaccept-headers&quot;&gt;使用带vendor media types的accept headers&lt;/h3&gt;
&lt;p&gt;严格来讲，&lt;code&gt;json&lt;/code&gt;这种媒体类型并没有被指定为&lt;a href=&quot;http://tools.ietf.org/html/rfc4627#section-6&quot;&gt;附加参数&lt;/a&gt;，如果你要构建一个好的公共API你应该考虑使用一种&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_media_type#Vendor_tree&quot;&gt;vendor media type&lt;/a&gt;。因此，请用自定义media type配置你的基于JSON的渲染器：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookingsAPIRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;media_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;application/vnd.megacorp.bookings+json&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样你的客户端请求将会是这样的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/bookings/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;application/vnd.megacorp.bookings+json; version=1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;urlpathversioning&quot;&gt;URLPathVersioning&lt;/h2&gt;
&lt;p&gt;这种方案需要客户端在URL路径中指定版本号。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/v1/bookings/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;application/json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;那么你的URL配置必须以关键字&lt;code&gt;version&lt;/code&gt;匹配版本号，这样，版本信息才能被版本管理方案获取：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;r&amp;#39;^(?P&amp;lt;version&amp;gt;[v1|v2]+)/bookings/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bookings_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bookings-list&amp;#39;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;r&amp;#39;^(?P&amp;lt;version&amp;gt;[v1|v2]+)/bookings/(?P&amp;lt;pk&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bookings_detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bookings-detail&amp;#39;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;namesapceversioning&quot;&gt;NamesapceVersioning&lt;/h2&gt;
&lt;p&gt;对于客户端来说，这种方式跟&lt;code&gt;URLParameterVersioning&lt;/code&gt;是几乎一样的，唯一的差别在于它是如何在你的Django应用中配置的，因为它使用URL命名空间代替了URL的关键词参数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/v1/something/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;application/json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这种方案中，&lt;code&gt;request.version&lt;/code&gt;属性是基于&lt;code&gt;namespace&lt;/code&gt;被定义的，用来匹配请求路径。下面的例子中我们给出了几个view的可能的两种URL前置，每个都是在不同的命名空间下。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# bookings/urls.py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookings_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bookings-list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^(?P&amp;lt;pk&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookings_detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bookings-detail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# urls.py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^v1/bookings/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bookings.urls&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^v2/bookings/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bookings.urls&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;v2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;URLParameterVersioning&lt;/code&gt;和&lt;code&gt;NamespaceVersioning&lt;/code&gt;都是合理的，如果你只是需要一个简单的版本控制方案，&lt;code&gt;URLParameterVersioning&lt;/code&gt;可能更适合于小型的项目，而&lt;code&gt;NamespaceVersioning&lt;/code&gt;则更适合管理中大型项目。&lt;/p&gt;

&lt;h2 id=&quot;hostnameversioning&quot;&gt;HostNameVersioning&lt;/h2&gt;
&lt;p&gt;域名版本控制方案需要客户端在URL的主机名中指定版本号。例如，下面对于&lt;code&gt;http://v1.example.com/bookings/&lt;/code&gt;的URL请求：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/bookings/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;v1.example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;application/json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;默认情况下，这种方式需要主机名能够匹配下面这个正则表达式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code&gt;^([a-zA-Z0-9]+)\.[a-zA-Z0-9]+\.[a-zA-Z0-9]+$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是，第一个组合是被包括在括号内的，表明这是主机名的一部分。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HostNameVersioning&lt;/code&gt;方案可以勉强用于debug模式下，你一般用诸如&lt;code&gt;127.0.0.1&lt;/code&gt;之类的IP地址直接访问的情况下。在比如你有很多在线的服务，而你想&lt;a href=&quot;https://reinteractive.net/posts/199-developing-and-testing-rails-applications-with-subdomains&quot;&gt;以子域名的方式访问本地的服务&lt;/a&gt;的情况下，可能会有帮助。&lt;/p&gt;

&lt;p&gt;如果你需要把请求路由到不同的服务器时，基于域名的版本控制就显得很方便，因为你只需要为不同API版本配置不同的DNS记录就行了，非常方便。&lt;/p&gt;

&lt;h2 id=&quot;queryparameterversioning&quot;&gt;QueryParameterVersioning&lt;/h2&gt;
&lt;p&gt;这种方案只需要你把版本号当成一个查询参数，添加在URL后面就行了，例如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/something/?version=0.1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;application/json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-5&quot;&gt;自定义版本控制方案&lt;/h1&gt;
&lt;p&gt;要实现自定义版本控制方案，需要继承&lt;code&gt;BaseVersioning&lt;/code&gt;并且重写&lt;code&gt;.determine_version&lt;/code&gt;方法。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;例子&lt;/h2&gt;
&lt;p&gt;下面的例子就是使用了自定义的&lt;code&gt;X-API-Version&lt;/code&gt;头来决定被访问的版本。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XAPIVersionScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versioning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseVersioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;determine_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;HTTP_X_API_VERSION&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果你的版本控制方案是基于请求的URL，那么你可能需要修改URL是如何被指定版本的，那么你就需要修改&lt;code&gt;.reverse()&lt;/code&gt;方法，具体的例子你可以查阅源码。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;原文链接：&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/versioning/&quot;&gt;http://www.django-rest-framework.org/api-guide/versioning/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 13 Dec 2015 21:28:01 +0000</pubDate>
        <link>http://blog.burling.wang/2015-12/api-versioning-of-django-rest-framework.html</link>
        <guid isPermaLink="true">http://blog.burling.wang/2015-12/api-versioning-of-django-rest-framework.html</guid>
        
        <category>django-rest-framework</category>
        
        <category>webservice</category>
        
        
      </item>
    
      <item>
        <title>写在开始的话</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;为何开始写博客？&lt;/h2&gt;
&lt;p&gt;最近需要拟写一份报告，发现写起来甚是费劲，思绪混乱，究其原因文献查阅不足、阅读不精细是一个方面，另一个重要的原因则是平时对写作训练欠缺，仔细一想，平时在向人介绍、讲解时逻辑也是比较混乱，需要进一步加强。遂开辟出这一块地方，将自己平时学习、实践时遇到的问题和感悟记录下来，一方面能够整理组织自己的知识架构，便于记忆，不至于几天不用便遗忘，另一方面则能够借助互联网与大家探讨、交流。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;写些什么？&lt;/h2&gt;
&lt;p&gt;我对很多东西都比较好奇，先是由Web入门开始接触工程项目，此前自己一人浑浑噩噩，不知该从事何方向，进入实验室之后开始有师兄师姐带，开始接触工程项目的开发，最开始是一个教务系统开发任务，由.Net开发，后来又分别用PHP(&lt;a href=&quot;http://www.thinkphp.cn/&quot;&gt;ThinkPHP&lt;/a&gt; + &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;)和Python(&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;)开发了几个小项目，在随后的一年多里一直从事Web与前端开发；后来移动互联网时代的到来，在机缘巧合之下开始接触Android开发，实习时从事智能设备开发，这也成了以后入职的工作岗位；在读研期间由于学业需要，开始涉猎模式识别，先是做壁画相关的识别搜索，后来深度学习的大潮来临，开始借助深度学习做人脸识别相关的工作……当然，这也造就了另外一个问题，那就是专攻不足，希望这一问题在日后能够有所改善。&lt;/p&gt;

&lt;p&gt;除了以上说的专题性比较强的方向，工具、产品、设计，我也不知道我后面又会对什么感兴趣了，总之，如有精力和记录的需要，我会一并记在此博客下，劳请诸位看官选择感兴趣的文章阅读交流并不吝赐教。&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Oct 2015 19:00:01 +0000</pubDate>
        <link>http://blog.burling.wang/2015-10/welcome-to-my-blog.html</link>
        <guid isPermaLink="true">http://blog.burling.wang/2015-10/welcome-to-my-blog.html</guid>
        
        
      </item>
    
  </channel>
</rss>
